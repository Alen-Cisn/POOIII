@using Txt.Shared.Dtos
@using Txt.Ui.Services.Interfaces
@using Txt.Ui.Shared
@inject ISnackbar Snackbar
@inject INotesService NotesService
@inject NavigationManager NavigationManager
@inject ILogger<NavMenu> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudDrawer @bind-Open="Open" @bind-Clipmode="mode">
    <MudStack Spacing="0" Justify="Justify.SpaceBetween">
        <MudPaper>

        </MudPaper>
        <MudTreeView T="FolderOrNote" Items="@treeItems" Dense="true" Hover="true" Ripple="false"
            SelectionMode="SelectionMode.SingleSelection" @bind-SelectedValue="SelectedValue">
            <ItemTemplate>
                <MudTreeViewItem Text="@context.Value?.Name" Value="@context.Value" Items="@context?.Children">
                    <BodyContent Context="item">
                        <MudIcon Icon="@context.Icon" Size="Size.Small" />
                        <MudText Typo="Typo.body2" Class="text-truncate"
                            Style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">
                            @context?.Value?.Name
                        </MudText>
                        @if (context.Visible)
                        {
                            <ActionMenu FolderOrNote="@context?.Value" OnFolderOrNoteChange="GetFolderTree" />
                        }


                    </BodyContent>
                </MudTreeViewItem>
            </ItemTemplate>
        </MudTreeView>
    </MudStack>
</MudDrawer>

@code {
    [Parameter]
    public bool Open { get; set; } = true;
    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    private string? Path { get; set; }
    private DrawerClipMode mode { get; set; } = DrawerClipMode.Always;
    private HashSet<TreeItemData<FolderOrNote>> treeItems = new HashSet<TreeItemData<FolderOrNote>>();

    protected override async Task OnInitializedAsync()
    {

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        string currentPath = uri.AbsolutePath;

        if (currentPath.StartsWith("/note"))
        {
            Path = currentPath.Substring("/note".Length);
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            await GetFolderTree();
        }


    }
    private FolderOrNote? _selectedValue;

    public FolderOrNote? SelectedValue
    {
        get => _selectedValue;
        set
        {
            if (value != null && value.Type == FolderOrNote.TypeEnum.Note)
            {
                _selectedValue = value;
                NavigationManager.NavigateTo("/note" + value.Path);
            }
            else
            {
                @* _selectedValue = null; *@
            }

        }
    }

    private async Task GetFolderTree()
    {
        var rootFolder = await NotesService.GetRootFolderAsync();
        if (rootFolder == null)
        {
            Snackbar.Add("There was an error retrieving the root folder.", Severity.Error);
            return;
        }
        treeItems = BuildTree(rootFolder);
        StateHasChanged();
    }

    private HashSet<TreeItemData<FolderOrNote>> BuildTree(FolderDto rootFolder)
    {
        if (rootFolder.ChildrenFolders != null && rootFolder.ChildrenFolders.Count() > 0)
        {
            return BuildTreeItems(rootFolder.ChildrenFolders);
        }
        else
        {
            return new();
        }
    }

    private HashSet<TreeItemData<FolderOrNote>> BuildTreeItems(IEnumerable<FolderDto> folders)
    {
        var treeItems = new HashSet<TreeItemData<FolderOrNote>>();

        foreach (var folder in folders)
        {
            HashSet<TreeItemData<FolderOrNote>> childrenItems = new HashSet<TreeItemData<FolderOrNote>>();

            if (folder.ChildrenFolders != null && folder.ChildrenFolders.Any())
            {
                childrenItems.UnionWith(BuildTreeItems(folder.ChildrenFolders));
            }

            if (folder.ChildrenNotes != null)
            {
                foreach (var note in folder.ChildrenNotes)
                {
                    var currentNoteValue = new FolderOrNote
                        {
                            Type = FolderOrNote.TypeEnum.Note,
                            Id = note.Id,
                            Name = note.Name,
                            ParentId = note.ParentId,
                            Path = note.Path
                        };
                    if (note.Path == Path)
                    {
                        _selectedValue = currentNoteValue;
                    }

                    childrenItems.Add(new TreeItemData<FolderOrNote>
                        {
                            Value = currentNoteValue,
                            Icon = Icons.Material.Outlined.Note,
                            Children = null,
                            Expandable = false,
                            Text = note.Name
                        });
                }
            }


            var treeItem = new TreeItemData<FolderOrNote>()
                {
                    Value = new FolderOrNote()
                    {
                        Type = FolderOrNote.TypeEnum.Folder,
                        Id = folder.Id,
                        Name = folder.Name,
                        ParentId = folder.ParentId,
                        Path = folder.Path
                    },
                    Icon = Icons.Material.Outlined.Folder,
                    Children = childrenItems.ToList(),
                    Expandable = childrenItems.Any(),
                    Text = folder.Name,
                    Visible = true
                };
            treeItems.Add(treeItem);
        }

        return treeItems;
    }

}
