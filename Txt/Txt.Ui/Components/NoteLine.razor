@namespace Txt.Ui.Components

@if (isEditing)
{
    <MudTextField AutoFocus="true" @bind-Value="markdownContent" @onblur="HandleBlur" @onfocus="HandleFocus"
    @onkeydown="HandleKeyDown" />
}
else
{
    <MudText Typo="Typo.body1" @onclick="HandleClick" focus Style="min-height: 2rem;">
    @RenderHtml(markdownContent)
</MudText>
}

@code {
    [Parameter] public string InitialContent { get; set; } = null!;
    [Parameter] public int Id { get; set; }
    [Parameter] public int OrderIndex { get; set; }
    [Parameter] public EventCallback<(int Id, string Content, int OrderIndex)> OnLineUpdated { get; set; }
    [Parameter] public EventCallback<int> OnRequestFocus { get; set; }
    [Parameter] public EventCallback<int> OnEnterPressed { get; set; }
    [Parameter] public bool IsFocused { get; set; }

    private string markdownContent = null!;
    private bool isEditing;

    protected override void OnInitialized()
    {
        markdownContent = InitialContent;
    }

    private void HandleClick()
    {
        isEditing = true;
        OnRequestFocus.InvokeAsync(Id);
    }

    private void HandleFocus()
    {
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        _ = (e.Key, e.ShiftKey) switch
        {
            ("ArrowUp", false) => OnRequestFocus.InvokeAsync(-1),
            ("ArrowDown", false) => OnRequestFocus.InvokeAsync(1),
            ("Enter", false) => OnEnterPressed.InvokeAsync(OrderIndex),
            _ => null
        };
    }

    @* if (e.Key == "ArrowUp")
        {

        }
        else if (e.Key == "ArrowDown")
        {
            OnRequestFocus.InvokeAsync(Id + 1);
        }
    } *@

    private async Task HandleBlur()
    {
        isEditing = false;
        await OnLineUpdated.InvokeAsync((Id, markdownContent, OrderIndex));
    }

    private MarkupString RenderHtml(string markdown)
    {
        return (MarkupString)Markdown.ToHtml(markdown);
    }
}