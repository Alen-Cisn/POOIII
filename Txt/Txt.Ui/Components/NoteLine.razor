@namespace Txt.Ui.Components

@if (isEditing)
{
    <MudTextField @bind-Value="markdownContent" @onblur="HandleBlur" @onfocus="HandleFocus" @onkeydown="HandleKeyDown" />
}
else
{
    <MudText Typo="Typo.body1" @onclick="HandleClick" focus Style="">
    @RenderHtml(markdownContent)
</MudText>
}

@code {
    [Parameter] public string InitialContent { get; set; } = null!;
    [Parameter] public int Id { get; set; }
    [Parameter] public EventCallback<(int Id, string Content)> OnLineUpdated { get; set; }
    [Parameter] public EventCallback<int> OnRequestFocus { get; set; }
    [Parameter] public bool IsFocused { get; set; }

    private string markdownContent = null!;
    private bool isEditing;

    protected override void OnInitialized()
    {
        markdownContent = InitialContent;
    }

    private void HandleClick()
    {
        isEditing = true;
        OnRequestFocus.InvokeAsync(Id);
    }

    private void HandleFocus()
    {
    }
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowUp")
        {
            OnRequestFocus.InvokeAsync(Id - 1);
        }
        else if (e.Key == "ArrowDown")
        {
            OnRequestFocus.InvokeAsync(Id + 1);
        }
    }

    private async Task HandleBlur()
    {
        isEditing = false;
        await OnLineUpdated.InvokeAsync((Id, markdownContent));
    }

    private MarkupString RenderHtml(string markdown)
    {
        return (MarkupString)Markdown.ToHtml(markdown);
    }
}
