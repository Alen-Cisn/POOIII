@using Txt.Shared.Dtos
@using Txt.Ui.Services.Interfaces
@inject INotesService NotesService
@inject ISnackbar Snackbar
@inject ILogger<NoteLines> Logger

@foreach (var noteLine in Lines.OrderBy(l => l.OrderIndex))
{
    <NoteLine InitialContent="@noteLine.Content" Id="@noteLine.Id" OrderIndex="@noteLine.OrderIndex"
    OnLineUpdated="HandleLineUpdated" OnRequestFocus="HandleRequestFocus" OnEnterPressed="HandleNewLine" />
}

@code {
    [Parameter]
    public IEnumerable<NoteLineDto> Lines { get; set; }

    [Parameter]
    public int NoteId { get; set; }
    [Parameter] public EventCallback OnLinesUpdated { get; set; }

    private int? currentFocusedId;

    protected async Task OnInitializedAsync()
    {
        if (Lines != null && Lines.Count() == 0)
        {

        }
    }

    private async Task HandleRequestFocus(int id)
    {
        if (currentFocusedId != id)
        {
            currentFocusedId = id;
            StateHasChanged(); // Re-render to update focus
        }

        // Optionally, you can set a delay here if needed for better UX
        await Task.Delay(50);

        // Set the corresponding NoteLine to editing mode if it exists
        var lineToEdit = Lines.FirstOrDefault(l => l.Id == currentFocusedId);
        if (lineToEdit != null)
        {
            // Logic to trigger editing mode on this specific line can be added here if needed.
            // This may involve invoking a method on the NoteLine component if necessary.
        }
    }

    private async Task HandleLineUpdated((int Id, string Content, int orderIndex) updatedLine)
    {
        var (id, updatedContent, orderIndex) = updatedLine;

        NoteLineDto? line = Lines.FirstOrDefault(l => l.Id == id);
        if (line == null)
        {
            Snackbar.Add("Line not found.", Severity.Error);
            return;
        }
        currentFocusedId = null;
        line.Content = updatedContent;
        Logger.LogInformation("Note line updated!");
        await NotesService.UpdateNoteLineAsync(id, NoteId, updatedContent, orderIndex);
    }

    private async Task HandleNewLine(int orderIndex)
    {
        await NotesService.CreateNoteLineAsync(NoteId, "", orderIndex + 1);
        await OnLinesUpdated.InvokeAsync();
    }

}